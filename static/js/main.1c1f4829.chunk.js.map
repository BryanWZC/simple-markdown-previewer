{"version":3,"sources":["Preview.js","Editor.js","serviceWorker.js","index.js"],"names":["marked","window","setOptions","gfm","breaks","Preview","id","dangerouslySetInnerHTML","__html","this","props","text","React","Component","Editor","handleChange","event","setState","editorText","target","value","state","bind","onChange","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUAGMA,G,YAASC,OAAOD,QAEtBA,EAAOE,WAAW,CAChBC,KAAK,EACLC,QAAQ,I,IAGJC,E,uKAEF,OACE,6BACE,yBAAKC,GAAK,UAAUC,wBAA2B,CAACC,OAAQR,EAAOS,KAAKC,MAAMC,c,GAJ5DC,IAAMC,WA8CbR,IClBAS,E,kDAjCb,WAAYJ,GAAO,IAAD,8BAChB,cAAMA,IAORK,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,WAAYF,EAAMG,OAAOC,SAPxC,EAAKC,MAAQ,CACXH,WDWU,miDCTZ,EAAKH,aAAe,EAAKA,aAAaO,KAAlB,gBALJ,E,qDAahB,OACE,yBAAKhB,GAAK,WACR,wBAAIA,GAAG,gBAAP,6BACF,yBAAKA,GAAI,WACP,wBAAIA,GAAK,mBAAT,mBACA,wBAAIA,GAAK,kBAAT,mBAEA,yBAAKA,GAAK,eACR,kBAAC,EAAD,CAASK,KAAMF,KAAKY,MAAMH,cAE5B,yBAAKZ,GAAK,cACR,8BAAUA,GAAG,SAASiB,SAAWd,KAAKM,aAAcK,MAAOX,KAAKY,MAAMH,mB,GAzB3DN,IAAMC,WCQPW,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c1f4829.chunk.js","sourcesContent":["import React from 'react';\nimport './Preview.css';\n\nconst marked = window.marked;\n\nmarked.setOptions({\n  gfm: true,\n  breaks: true,\n});\n\nclass Preview extends React.Component {\n  render(){\n    return(\n      <div>\n        <div id = 'preview' dangerouslySetInnerHTML = {{__html: marked(this.props.text)}}></div>\n      </div>\n    )\n  }\n}\nconst toBeLoaded = `# Shiba Inu\n![Shiba Inu](https://www.jetaawgtn.org.nz/wp-content/uploads/2019/10/dog-250x250.jpg)\n\nThe Shiba Inu is a Japanese breed of hunting dog. A small-to-medium breed, it is the smallest of the six original and distinct spitz breeds of dog native to Japan.\n\nA small, alert and agile dog that copes very well with mountainous terrain and hiking trails, the Shiba Inu was originally bred for hunting. It looks similar to and is often mistaken for other Japanese dog breeds like the Akita Inu or Hokkaido, but the Shiba Inu is a different breed with a distinct blood line, temperament, and smaller size than other Japanese dog breeds.[\n\n## Traits\n\n\\`Weight:\\` 10 kg (Male), 8 kg (Female)\n\\`Height:\\` 35 to 43 cm (Male), 33 to 41 cm (Female)\n\\`Coat:\\` Double\n\\`Color:\\` Red, sesame, black and tan, or cream\n\\`Litter Size:\\` 3 puppies on average\n\\`Life Span:\\` 13â€“15 years\n\\`Temperament:\\` Charming, Alert, Keen, Fearless, Confident, Faithful\n\n## 6 Suprising Facts\n1. They are an ancient breed\n2. They were originally used as hunting dogs\n3. They are one of the most popular breeds in japan\n4. There used to be only 3 kinds of Shiba Inus\n5. They were once almost extinct\n6. They have cat-like qualities\n\n## Random Shibe Quote\n>\"The dog has a spirited boldness and is fiercely proud with a good nature and a feeling of artlessness. The Shiba is able to move quickly with nimble, elastic steps.\"\n\n\\`\\`\\`\nLast thoughts: Are Shibes one of your favorite breeds?\n\\`\\`\\`\n\n**Source:** [Wikipedia] \n\n[Wikipedia]: https://en.wikipedia.org/wiki/Shiba_Inu\n\n`;\nexport default Preview;\nexport {toBeLoaded};\n","import React from 'react';\r\nimport './Editor.css';\r\nimport Preview, {toBeLoaded} from './Preview.js';\r\n\r\nclass Editor extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      editorText: toBeLoaded,\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange = (event) =>{\r\n    this.setState({editorText: event.target.value});\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div id = 'wrapper'>\r\n        <h1 id='main-heading'>Simple Markdown Previewer</h1>\r\n      <div id= 'headers'>\r\n        <h3 id = 'preview-heading'>Preview Section</h3>\r\n        <h3 id = 'editor-heading'>Editor Section</h3>\r\n      </div>\r\n        <div id = 'preview-col'>\r\n          <Preview text={this.state.editorText}/>\r\n        </div>\r\n        <div id = 'editor-col'>\r\n          <textarea id='editor' onChange= {this.handleChange} value={this.state.editorText}>\r\n          </textarea>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Editor;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Editor from './Editor';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}